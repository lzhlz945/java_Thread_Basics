*
 * 线程安全问题
 * 同步代码块：当使用runnable时可以使用this作为监视器，
 * 当使用继承Thread时尽量避免使用this作为锁
 * 同步方法：默认的锁是this，当使用的继承Thread时会出现线程
 * 安全问题，锁不唯一了（this) 把当前方法改成静态的即可（默认锁
 * 是当前类的.class对象）  确保锁的唯一即可
 * 同步方法和同步代码块包含的不能太多和太少，太多会造成一个线程在执行直至执行完，
 * 太少会导致线程安全问题。
 *
 *
synchronize和lock的相同和不同（简化）
相同：二者都可以决绝线程安全问题
不同：synchronize机智在执行完全相应的代码以后，自动释放同步监视器
      lock需要手动启动同步，结束时也要手动实现unlock（）；

涉及到的三个方法

wait（）：线程进入阻塞状态，并释放监视器
notify（）：唤醒被wait（）的线程，有多个就唤醒优先级高的那个
notifyAll()：一旦执行此方法就会唤醒所有的wait方法的线程
注意：1、这三个方法都必须在同步方法或者同步代码块中执行
      2、这三个方法都必须是和监视器相同的调用 java.lang.IllegalMonitorStateException
      3、这三个方法是定义在java.lang.Object类中
实现runnable接口 MyRunnable my= new MyRunnable（） new Thread(my)

callable
1、有返回值 2、可以抛异常 3、需要funtrue Task 4、可以作为泛型传递

//实现callable要用FutureTask接口 还要使用Thread来启动
//FutureTask最终继承了Runnable 接口 就可以实现Thread 来启动线程
  public Thread(Runnable target) {
        init(null, target, "Thread-" + nextThreadNum(), 0);
    }

使用线程池的好处
1、减少创建线程消耗的内存
2、提升效率
3、可以复用
4、便于管理
5、类似于公交车
execute()  参数是Callable
submit()   参数是Runnable
还需要手动停止shutdown()
  Class<? extends ExecutorService> aClass = service.getClass();
        System.out.println(aClass);
        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;
        service1.setCorePoolSize(1);
        service1.setKeepAliveTime(1,TimeUnit.SECONDS);

        service1.setMaximumPoolSize(10);


        这些方法是通过获取service的getClass（）获取的ExecutorService的实现类来获取的方法
         ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;
setCorePoolSize(1) 核心池的大小
service1.setKeepAliveTime(1,TimeUnit.SECONDS);  线程多久没有任务时停止
service1.setMaximumPoolSize(10);  z最大线程数