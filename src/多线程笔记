*
 * 线程安全问题
 * 同步代码块：当使用runnable时可以使用this作为监视器，
 * 当使用继承Thread时尽量避免使用this作为锁
 * 同步方法：默认的锁是this，当使用的继承Thread时会出现线程
 * 安全问题，锁不唯一了（this) 把当前方法改成静态的即可（默认锁
 * 是当前类的.class对象）  确保锁的唯一即可
 * 同步方法和同步代码块包含的不能太多和太少，太多会造成一个线程在执行直至执行完，
 * 太少会导致线程安全问题。
 *
 *
synchronize和lock的相同和不同（简化）
相同：二者都可以决绝线程安全问题
不同：synchronize机智在执行完全相应的代码以后，自动释放同步监视器
      lock需要手动启动同步，结束时也要手动实现unlock（）；